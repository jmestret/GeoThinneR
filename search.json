[{"path":"https://jmestret.github.io/GeoThinneR/articles/GeoThinneR.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"A collection of simple methods for spatial thinning of species occurrences and point data","text":"Loading occurrence data R species distribution modeling types point data analysis easy task can become tedious dealing uncertain records sampling bias. Spatial thinning methods can helpful situations reducing sampling bias retaining significant number points specific desired count. GeoThinneR package offers collection straightforward effective methods spatial thinning species occurrences point data, allowing researchers improve quality datasets. package includes main function (thin_points) wraps various methods (specified method parameter) spatial thinning, including: Brute force distance thinning (\"brute_force\") K-D trees thinning (\"kd_tree\") R-trees thinning (\"r_tree\") Rounding hashing (\"round_hash\") Grid sampling (\"grid\") Precision thinning (\"precision\") variety allows users select suitable approach based specific datasets research objectives. vignette, provide overview key functionalities package demonstrate use various thinning methods along advanced options.","code":""},{"path":"https://jmestret.github.io/GeoThinneR/articles/GeoThinneR.html","id":"setup-and-load-datasets","dir":"Articles","previous_headings":"","what":"Setup and load datasets","title":"A collection of simple methods for spatial thinning of species occurrences and point data","text":"get started GeoThinneR, also load following packages: terra: working raster spatial data. sf: handling spatial polygons. ggplot2: visualizing thinning process. simulate dataset n = 2000 random points two species load subset real data Logerhead sea turtle (Caretta caretta) occurrences Mediterranean Sea.","code":"library(GeoThinneR) library(terra) library(sf) library(ggplot2) # Set seed for reproducibility set.seed(123)  # Simulate the dataset n <- 2000  # Number of points sim_data <- data.frame(   long = runif(n, min = -20, max = 20),   lat = runif(n, min = -10, max = 10),   sp = sample(c(\"sp1\", \"sp2\"), n, replace = TRUE) )  # Load the Caretta caretta occurrences data(\"caretta\")  # Load mediterranean sea polygon medit <- system.file(\"extdata\", \"mediterranean_sea.gpkg\", package = \"GeoThinneR\") medit <- sf::st_read(medit) ggplot() +   geom_point(data = sim_data, aes(x = long, y = lat, color = sp)) +   scale_color_manual(values = c(sp1 = \"#5183B3\", sp2 = \"#EB714B\")) +   xlab(\"Longitude\") + ylab(\"Latitude\") +   ggtitle(\"Simulated Species Occurrences\") +   theme_minimal()  ggplot() +   geom_sf(data = medit, color = \"#353839\", fill = \"antiquewhite\", alpha = 0.7)  +   geom_point(data = caretta, aes(x = decimalLongitude, y = decimalLatitude),color = \"#EB714B\", alpha = 1) +   xlab(\"Longitude\") + ylab(\"Latitude\") +   ggtitle(\"C. caretta Mediterranean Sea Occurrences\") +   theme(       panel.grid.major = element_line(color = gray(.5),linetype = \"dashed\",linewidth = 0.5),       panel.background = element_rect(fill = \"white\"),       axis.title = element_blank(),       legend.position = \"bottom\"     )"},{"path":"https://jmestret.github.io/GeoThinneR/articles/GeoThinneR.html","id":"quick-start-guide","dir":"Articles","previous_headings":"","what":"Quick start guide","title":"A collection of simple methods for spatial thinning of species occurrences and point data","text":"Now loaded data, let’s quickly explore use thin_points() function perform spatial thinning datasets. Let’s start applying spatial thinning simulated dataset using brute force distance thinning method. pass dataframe/tibble/matrix data argument, lon_col lat_col, can define names columns containing longitude latitude (x, y) coordinates. don’t specify columns, take first two columns default. use brute force algorithm (brute_force) specified method parameter set thinning distance (thin_dist) 20 km. Since deterministic approach, run 5 iterations (trials) return iterations (all_trials). can see every 5 trials, one returns one point less. due randomness algorithm. Next, thin Caretta caretta occurrences using K-D trees method. ’ll use thinning distance 30 km return trial points kept (all_trials set FALSE).  can see, GeoThinneR, ’s easy apply spatial thinning dataset. see next sections, variety options methods best suit different situations. learn use specific method options, thin groups separately, request specific number points, select less uncertain points, work points represent longitude latitude coordinates.","code":"# Apply spatial thinning to the simulated data thin_sim_data <- thin_points(   data = sim_data, # Dataframe with coordinates   long_col = \"long\", # Longitude column name   lat_col = \"lat\", # Latitude column name   method = \"brute_force\",  # Method for thinning   thin_dist = 20,  # Thinning distance in km,   trials = 5, # Number of reps   all_trials = TRUE, # Return all trials   seed = 123 # Seed for reproducibility ) # Number of keeped points in each trial sapply(thin_sim_data, nrow) #> [1] 1795 1794 1795 1795 1795 # Apply spatial thinning to the real data thin_real_data <- thin_points(   data = caretta, # We will not specify long_col, lat_col as they are in position 1 and 2   method = \"kd_tree\",   thin_dist = 30,  # Thinning distance in km,   trials = 5,   all_trials = FALSE,   seed = 123 )  # Thinned dataframe stored in the first element of the output list dim(thin_real_data[[1]]) #> [1] 520   5"},{"path":"https://jmestret.github.io/GeoThinneR/articles/GeoThinneR.html","id":"thinning-methods","dir":"Articles","previous_headings":"","what":"Thinning methods","title":"A collection of simple methods for spatial thinning of species occurrences and point data","text":"section, show use thinning method, highlighting unique parameters features.","code":""},{"path":"https://jmestret.github.io/GeoThinneR/articles/GeoThinneR.html","id":"distance-based-methods","dir":"Articles","previous_headings":"Thinning methods","what":"Distance-based methods","title":"A collection of simple methods for spatial thinning of species occurrences and point data","text":"distance-based methods apply spatial thinning based exact distance defined thin_dist parameter. using longitude latitude data, function computes Haversine distance. can also pass custom Earth radius using R parameter (default, uses 6371 km).","code":""},{"path":"https://jmestret.github.io/GeoThinneR/articles/GeoThinneR.html","id":"brute-force-distance-thinning","dir":"Articles","previous_headings":"Thinning methods > Distance-based methods","what":"Brute force distance thinning","title":"A collection of simple methods for spatial thinning of species occurrences and point data","text":"common method calculating distance points, directly computes pairwise distances retains points far enough apart based thinning distance. default, computes Haversine distance using RdistEarth function fields package. euclidean set TRUE, compute Euclidean distance instead. main advantage method computes full picture points, making easier retain maximum number points. However, primary drawback time memory consuming, requires computing pairwise comparisons.","code":"system.time( thin_sim_data <- thin_points(   data = sim_data,   method = \"brute_force\",    thin_dist = 20,   trials = 50,   all_trials = FALSE,   seed = 123 )) #>    user  system elapsed  #>   0.312   0.008   0.320 nrow(thin_sim_data[[1]]) #> [1] 1795"},{"path":"https://jmestret.github.io/GeoThinneR/articles/GeoThinneR.html","id":"k-d-trees","dir":"Articles","previous_headings":"Thinning methods > Distance-based methods","what":"K-D trees","title":"A collection of simple methods for spatial thinning of species occurrences and point data","text":"K-D trees well-known data structure partitioning space nearest neighbor searches, making efficient option distance-based thinning. K-D tree binary treeof k dimensions partitions space discard data points away. method uses nabor R package implement K-D trees via libnabo library. Since K-D trees based Euclidean distance, euclidean set FALSE work longitude latitude data, GeoThinneR transform coordinates XYZ Cartesian coordinates. Additionally, setting space_partitioning TRUE, space divided grids computing K-D tree, can memory-efficient large datasets.","code":"system.time( thin_sim_data <- thin_points(   data = sim_data,   method = \"kd_tree\",    thin_dist = 20,   trials = 50,   all_trials = FALSE,   seed = 123 )) #>    user  system elapsed  #>   0.188   0.000   0.188 nrow(thin_sim_data[[1]]) #> [1] 1795"},{"path":"https://jmestret.github.io/GeoThinneR/articles/GeoThinneR.html","id":"r-trees","dir":"Articles","previous_headings":"Thinning methods > Distance-based methods","what":"R-trees","title":"A collection of simple methods for spatial thinning of species occurrences and point data","text":"R-trees widely used spatial searching, especially geographic coordinates. R-trees slightly higher construction cost compared methods, speed searches. method uses parameters K-D tree method. GeoThinneR, R-trees implemented slightly modified version rtree R package, based Boost geometry library. order use R-tree need install modified package GitHub using remotes::install_github(\"jmestret/rtree\"). modification allows computing Euclidean distance (euclidean = TRUE) Haversine distance (euclidean = FALSE) geographic coordinates.","code":"system.time( thin_sim_data <- thin_points(   data = sim_data,   method = \"r_tree\",    thin_dist = 20,   trials = 50,   all_trials = FALSE,   seed = 123 )) nrow(thin_sim_data[[1]])"},{"path":"https://jmestret.github.io/GeoThinneR/articles/GeoThinneR.html","id":"rounding-and-hashing","dir":"Articles","previous_headings":"Thinning methods > Distance-based methods","what":"Rounding and hashing","title":"A collection of simple methods for spatial thinning of species occurrences and point data","text":"method reduces data complexity particularly useful specific scenarios. First, coordinates data points rounded specified precision based thinning distance. rounded coordinates hashed grid cell identified unique combination longitude latitude values. algorithm iterates grid cells, checking distance points within cell neighboring cells, removes points fall within thinning distance. method can also seen form precision-based thinning. distance points can calculated using either Haversine Euclidean formula. method memory-efficient fast, especially large datasets large thinning distances. However, main drawback usually find optimal maximum number points retain, removes without computing distances.","code":"system.time( thin_sim_data <- thin_points(   data = sim_data,   method = \"round_hash\",    thin_dist = 20,   trials = 50,   all_trials = FALSE,   seed = 123 )) #>    user  system elapsed  #>   0.078   0.000   0.078 nrow(thin_sim_data[[1]]) #> [1] 1790"},{"path":[]},{"path":"https://jmestret.github.io/GeoThinneR/articles/GeoThinneR.html","id":"grid-sampling","dir":"Articles","previous_headings":"Thinning methods > Grid-based methods","what":"Grid sampling","title":"A collection of simple methods for spatial thinning of species occurrences and point data","text":"Grid sampling standard method area divided grid, points sampled grid cell. method fast memory-efficient. two main ways apply grid sampling: () Define characteristics grid, (ii) pass grid raster (SpatRaster). first method, can use thin_dist parameter define grid cell size (distance km approximated degrees define grid cell size), can pass resolution grid (e.g., resolution = 0.25 0.25x0.25-degree cells). want align grid external data covariate layers, can pass origin argument tuple two values (e.g., c(0, 0)). Similarly, can specify coordinate reference system (CRS) grid (crs). Alternatively, can pass SpatRaster object, grid used thinning process.","code":"system.time( thin_sim_data <- thin_points(   data = sim_data,   method = \"grid\",    resolution = 1,   origin = c(0, 0),   crs = \"epsg:4326\",   trials = 50,   all_trials = FALSE,   seed = 123 )) #>    user  system elapsed  #>   0.050   0.000   0.049 rast_obj <- terra::rast(xmin = -20, xmax = 20, ymin = -10, ymax = 10, res = 1) system.time( thin_sim_data <- thin_points(   data = sim_data,   method = \"grid\",    raster_obj = rast_obj,   trials = 50,   all_trials = FALSE,   seed = 123 )) #>    user  system elapsed  #>   0.002   0.000   0.002"},{"path":[]},{"path":"https://jmestret.github.io/GeoThinneR/articles/GeoThinneR.html","id":"precision-thinning","dir":"Articles","previous_headings":"Thinning methods > Coordinate Precision-Based Methods","what":"Precision Thinning","title":"A collection of simple methods for spatial thinning of species occurrences and point data","text":"approach, coordinates rounded certain precision remove points fall close together. removing points based coordinate precision, coordinate values restored original locations. simplest method useful working data different sources varying coordinate precisions. use , need define precision parameter, indicating number decimals coordinates rounded. methods implemented GeoThinneR. Depending specific dataset research needs, one method may suitable others.","code":"system.time( thin_sim_data <- thin_points(   data = sim_data,   method = \"precision\",    precision = 0,   trials = 50,   all_trials = FALSE,   seed = 123 )) #>    user  system elapsed  #>   0.003   0.000   0.003 nrow(thin_sim_data[[1]]) #> [1] 775"},{"path":[]},{"path":"https://jmestret.github.io/GeoThinneR/articles/GeoThinneR.html","id":"spatial-thinning-by-group","dir":"Articles","previous_headings":"Additional features","what":"Spatial thinning by group","title":"A collection of simple methods for spatial thinning of species occurrences and point data","text":"cases, dataset may include different groups, species, time periods, areas, conditions, want thin independently. group_col parameter allows specify column containing grouping factor, thinning performed separately group. example, simulated data two species, can use parameter thin species independently:","code":"thin_sim_data <- thin_points(   data = sim_data,   thin_dist = 20,   seed = 123 ) thin_sim_data_group <- thin_points(   data = sim_data,   group_col = \"sp\",   thin_dist = 20,   seed = 123 )  nrow(thin_sim_data[[1]]) #> [1] 1795 nrow(thin_sim_data_group[[1]]) #> [1] 1889"},{"path":"https://jmestret.github.io/GeoThinneR/articles/GeoThinneR.html","id":"fixed-number-of-points","dir":"Articles","previous_headings":"Additional features","what":"Fixed number of points","title":"A collection of simple methods for spatial thinning of species occurrences and point data","text":"need retain fixed number points best covers area data points located? target_points parameter allows specify number points keep, function return number points spaced separated possible. Additionally, can also set thin_dist parameter points closer distance retained. Currently, approach implemented using brute force method, cautious applying large datasets.","code":"thin_real_data <- thin_points(   data = caretta,    target_points = 150,   thin_dist = 30,   all_trials = FALSE,   seed = 123,   verbose = TRUE ) #> Starting spatial thinning at 2024-09-02 20:20:14 #> For specific target points, brute force method is used. #> Total execution time: 2.56 seconds nrow(thin_real_data[[1]]) #> [1] 150 ggplot() +   geom_sf(data = medit, color = \"#353839\", fill = \"antiquewhite\", alpha = 0.7)  +   geom_point(data = thin_real_data[[1]], aes(x = long, y = lat),color = \"#5183B3\", alpha = 1) +   xlab(\"Longitude\") + ylab(\"Latitude\") +   ggtitle(\"C. caretta Mediterranean Sea Occurrences\") +   theme(       panel.grid.major = element_line(color = gray(.5),linetype = \"dashed\",linewidth = 0.5),       panel.background = element_rect(fill = \"white\"),       axis.title = element_blank(),       legend.position = \"bottom\"     )"},{"path":"https://jmestret.github.io/GeoThinneR/articles/GeoThinneR.html","id":"select-points-by-priority","dir":"Articles","previous_headings":"Additional features","what":"Select points by priority","title":"A collection of simple methods for spatial thinning of species occurrences and point data","text":"scenarios, may want prioritize certain points based specific criterion, uncertainty, data quality, recency. priority parameter allows pass vector representing priority point. Currently, feature can used grid precision methods. can use argument prioritize points based criteria, uncertainty, year observation, data quality. example, sea turtle data downloaded GBIF, column named coordinateUncertaintyInMeters. can use prioritize points lower uncertainty within grid cell (grid method) rounding coordinates (precision method). Keep mind bigger uncertainty values represent less priority reverse values.","code":"thin_real_data <- thin_points(   data = caretta,   method = \"precision\",   precision = 0,   seed = 123 )  # Substracting the maximum - the highest uncertainty becomes the lowest priority and vice versa. priority <- max(caretta$coordinateUncertaintyInMeters) - caretta$coordinateUncertaintyInMeters thin_real_data_uncert <- thin_points(   data = caretta,   method = \"precision\",   precision = 0,   priority = priority,   seed = 123 )  mean(thin_real_data[[1]]$coordinateUncertaintyInMeters) #> [1] 35557.72 mean(thin_real_data_uncert[[1]]$coordinateUncertaintyInMeters) #> [1] 21235.14"},{"path":"https://jmestret.github.io/GeoThinneR/articles/GeoThinneR.html","id":"other-packages","dir":"Articles","previous_headings":"","what":"Other Packages","title":"A collection of simple methods for spatial thinning of species occurrences and point data","text":"GeoThinneR package inspired work many others developed methods packages working spatial data thinning techniques. goal GeoThinneR offer additional flexibility method selection address specific needs encountered using packages. like acknowledge mention tools may suitable work: spThin: thin function provides brute-force spatial thinning data, maximizing number retained points random iterative repetitions, using Haversine distance. enmSdmX: Includes geoThin function, calculates pairwise distances points thinning purposes. dismo: gridSample function samples points using grid stratification, providing efficient method spatial thinning.","code":""},{"path":"https://jmestret.github.io/GeoThinneR/articles/GeoThinneR.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"A collection of simple methods for spatial thinning of species occurrences and point data","text":"Aiello‐Lammens, M. E., Boria, R. ., Radosavljevic, ., Vilela, B., Anderson, R. P. (2015). spThin: R package spatial thinning species occurrence records use ecological niche models. Ecography, 38(5), 541-545. Elseberg, J., Magnenat, S., Siegwart, R., & Nüchter, . (2012). Comparison nearest-neighbor-search strategies implementations efficient shape registration. Journal Software Engineering Robotics, 3(1), 2-12. Hijmans, R.J., Phillips, S., Leathwick, J., & Elith, J. (2023). dismo: Species Distribution Modeling. R Package Version 1.3-14. https://cran.r-project.org/package=dismo Johnson, K., & Hunziker, P. (2021). rtree: R-Trees point data R. R Package Version 0.2.0. https://github.com/akoyabio/rtree Smith, . B., Murphy, S. J., Henderson, D., & Erickson, K. D. (2023). Including imprecisely georeferenced specimens improves accuracy species distribution models estimates niche breadth. Global Ecology Biogeography, 32(3), 342-355.","code":""},{"path":"https://jmestret.github.io/GeoThinneR/articles/GeoThinneR.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"A collection of simple methods for spatial thinning of species occurrences and point data","text":"","code":"sessionInfo() #> R version 4.4.1 (2024-06-14) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] ggplot2_3.5.1    sf_1.0-16        terra_1.7-78     GeoThinneR_1.0.0 #>  #> loaded via a namespace (and not attached): #>  [1] sass_0.4.9         utf8_1.2.4         class_7.3-22       KernSmooth_2.23-24 #>  [5] digest_0.6.37      magrittr_2.0.3     evaluate_0.24.0    grid_4.4.1         #>  [9] fastmap_1.2.0      maps_3.4.2         jsonlite_1.8.8     e1071_1.7-14       #> [13] DBI_1.2.3          spam_2.10-0        fansi_1.0.6        viridisLite_0.4.2  #> [17] scales_1.3.0       codetools_0.2-20   textshaping_0.4.0  jquerylib_0.1.4    #> [21] cli_3.6.3          rlang_1.1.4        units_0.8-5        munsell_0.5.1      #> [25] withr_3.0.1        cachem_1.1.0       yaml_2.3.10        tools_4.4.1        #> [29] colorspace_2.1-1   vctrs_0.6.5        R6_2.5.1           matrixStats_1.3.0  #> [33] nabor_0.5.0        proxy_0.4-27       lifecycle_1.0.4    classInt_0.4-10    #> [37] fs_1.6.4           ragg_1.3.2         pkgconfig_2.0.3    desc_1.4.3         #> [41] pkgdown_2.1.0      pillar_1.9.0       bslib_0.8.0        gtable_0.3.5       #> [45] data.table_1.16.0  glue_1.7.0         Rcpp_1.0.13        fields_16.2        #> [49] systemfonts_1.1.0  xfun_0.47          tibble_3.2.1       highr_0.11         #> [53] knitr_1.48         farver_2.1.2       htmltools_0.5.8.1  rmarkdown_2.28     #> [57] labeling_0.4.3     dotCall64_1.1-1    compiler_4.4.1"},{"path":"https://jmestret.github.io/GeoThinneR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jorge Mestre-Tomás. Author, maintainer.","code":""},{"path":"https://jmestret.github.io/GeoThinneR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mestre-Tomás J (2024). GeoThinneR: Simple Spatial Thinning Ecological Spatial Analysis. R package version 1.0.0, https://jmestret.github.io/GeoThinneR/, https://github.com/jmestret/GeoThinneR.","code":"@Manual{,   title = {GeoThinneR: Simple Spatial Thinning for Ecological and Spatial Analysis},   author = {Jorge Mestre-Tomás},   year = {2024},   note = {R package version 1.0.0,     https://jmestret.github.io/GeoThinneR/},   url = {https://github.com/jmestret/GeoThinneR}, }"},{"path":[]},{"path":"https://jmestret.github.io/GeoThinneR/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Simple Spatial Thinning for Ecological and Spatial Analysis","text":"GeoThinneR R package designed spatial thinning species occurrences types geospatial point data. offers collection thinning methods, including distance-based, grid-based, precision-based algorithms. Whether ’re working species distribution models (SDMs), ecological niche modeling, managing biodiversity datasets, GeoThinneR provides tools can help correct sampling bias, reduce spatial autocorrelation, improve model performance. Users can choose different thinning algorithms depending specific needs, including ability perform thinning using grouping variable, specify target number points, apply preference filtering based uncertainty criteria.","code":""},{"path":"https://jmestret.github.io/GeoThinneR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Simple Spatial Thinning for Ecological and Spatial Analysis","text":"can install GeoThinneR CRAN using following command: install development version GeoThinneR GitHub, use: Optionally, use R-trees need install:","code":"install.packages(\"GeoThinneR\") # install.packages(\"devtools\") devtools::install_github(\"jmestret/GeoThinneR\") devtools::install_github(\"jmestret/rtree\")"},{"path":"https://jmestret.github.io/GeoThinneR/index.html","id":"how-to-use-geothinner","dir":"","previous_headings":"","what":"How to Use GeoThinneR","title":"Simple Spatial Thinning for Ecological and Spatial Analysis","text":"documentation can found https://jmestret.github.io/GeoThinneR/. examples demonstrating use package different spatial thinning methods.","code":""},{"path":"https://jmestret.github.io/GeoThinneR/index.html","id":"example-1-distance-based-thinning","dir":"","previous_headings":"How to Use GeoThinneR","what":"Example 1: Distance-based thinning","title":"Simple Spatial Thinning for Ecological and Spatial Analysis","text":"example, use brute force method thin points based specified distance:","code":"library(GeoThinneR)  # Simulated data (longitude, latitude) set.seed(1234) sim_data <- data.frame(long = runif(100, -76, -75), lat = runif(100, 39, 40))   # Thinning the points with a distance of 30 km thin_distance <- thin_points(   data = sim_data,   method = \"brute_force\",   thin_dist = 15,   trials = 50,   seed = 1234 )  # View the number of kept points nrow(thin_distance[[1]]) #> [1] 29"},{"path":"https://jmestret.github.io/GeoThinneR/index.html","id":"example-2-grid-based-thinning-with-a-raster-file","dir":"","previous_headings":"How to Use GeoThinneR","what":"Example 2: Grid-based thinning with a raster file","title":"Simple Spatial Thinning for Ecological and Spatial Analysis","text":"example, use grid sampling method raster file thin data:","code":"library(GeoThinneR) library(terra)  # Create a raster object rast_obj <- rast(xmin = -20, xmax = 20, ymin = -10, ymax = 10, res = 2)  # Simulated data (longitude, latitude) set.seed(1234) sim_data <- data.frame(long = runif(300, -20, 20), lat = runif(300, -10, 10))  # Perform grid-based thinning thin_grid <- thin_points(   data = sim_data,   method = \"grid\",   raster_obj = rast_obj,   trials = 50,   seed = 1234 )  # View the number of kept points nrow(thin_grid[[1]]) #> [1] 149 #> Linking to GEOS 3.11.2, GDAL 3.8.2, PROJ 9.3.1; sf_use_s2() is TRUE"},{"path":"https://jmestret.github.io/GeoThinneR/index.html","id":"example-3-precision-based-thinning-with-grouping-variable","dir":"","previous_headings":"How to Use GeoThinneR","what":"Example 3: Precision-based thinning with grouping variable","title":"Simple Spatial Thinning for Ecological and Spatial Analysis","text":"example, perform precision-based thinning considering grouping variable:  details various methods available GeoThinneR additional functionalities like keeping exact number points filtering according preference variable, please refer package website documentation.","code":"library(GeoThinneR)  # Simulated data with a grouping variable set.seed(1234) sim_data <- data.frame(   long = runif(100, 10.5, 11),   lat = runif(100, 10.5, 11),   group = sample(c(\"species_1\", \"species_2\"), 100, replace = TRUE) )  # Perform precision-based thinning with grouping thin_precision <- thin_points(   data = sim_data,   method = \"precision\",   precision = 1,  # rounding precision   group_col = \"group\",  # grouping variable   trials = 50,   seed = 1234 )  # View the number of kept points nrow(thin_precision[[1]]) #> [1] 51"},{"path":"https://jmestret.github.io/GeoThinneR/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Simple Spatial Thinning for Ecological and Spatial Analysis","text":"welcome contributions! suggestions improvements new features, please open issue submit pull request GitHub repository.","code":""},{"path":"https://jmestret.github.io/GeoThinneR/index.html","id":"how-to-cite-geothinner","dir":"","previous_headings":"","what":"How to cite GeoThinneR","title":"Simple Spatial Thinning for Ecological and Spatial Analysis","text":"GeoThinneR paper currently progress. Meanwhile, can reference GitHub repository follows: Mestre-Tomás, J. (2024). GeoThinneR: R package simple spatial thinning methods ecological spatial analysis. R package version 1.0.0, https://github.com/jmestret/GeoThinneR","code":""},{"path":"https://jmestret.github.io/GeoThinneR/reference/assign_coords_to_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign Geographic Coordinates to Grid Cells — assign_coords_to_grid","title":"Assign Geographic Coordinates to Grid Cells — assign_coords_to_grid","text":"function assigns set geographic coordinates (longitude latitude) grid cells based specified cell size.","code":""},{"path":"https://jmestret.github.io/GeoThinneR/reference/assign_coords_to_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign Geographic Coordinates to Grid Cells — assign_coords_to_grid","text":"","code":"assign_coords_to_grid(coords, cell_size)"},{"path":"https://jmestret.github.io/GeoThinneR/reference/assign_coords_to_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign Geographic Coordinates to Grid Cells — assign_coords_to_grid","text":"coords data frame matrix two columns: longitude latitude. cell_size Numeric value representing size grid cell, typically degrees.","code":""},{"path":"https://jmestret.github.io/GeoThinneR/reference/assign_coords_to_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign Geographic Coordinates to Grid Cells — assign_coords_to_grid","text":"character vector grid cell identifiers, identifier formatted \"x_y\", representing grid cell coordinates.","code":""},{"path":"https://jmestret.github.io/GeoThinneR/reference/assign_coords_to_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign Geographic Coordinates to Grid Cells — assign_coords_to_grid","text":"","code":"coords <- data.frame(long = c(-122.4194, 0), lat = c(37.7749, 0)) cell_size <- 1 assign_coords_to_grid(coords, cell_size) #> [1] \"0_37\"  \"122_0\""},{"path":"https://jmestret.github.io/GeoThinneR/reference/brute_force_thinning.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Brute Force Thinning — brute_force_thinning","title":"Perform Brute Force Thinning — brute_force_thinning","text":"function applies brute force algorithm thin set spatial coordinates, attempting maximize number points retained ensuring minimum distance (`thin_dist`) two points.","code":""},{"path":"https://jmestret.github.io/GeoThinneR/reference/brute_force_thinning.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Brute Force Thinning — brute_force_thinning","text":"","code":"brute_force_thinning(   coordinates,   thin_dist = 10,   trials = 10,   all_trials = FALSE,   target_points = NULL,   euclidean = FALSE,   R = 6371 )"},{"path":"https://jmestret.github.io/GeoThinneR/reference/brute_force_thinning.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Brute Force Thinning — brute_force_thinning","text":"coordinates numeric matrix data frame two columns representing longitude latitude (XY coordinates `euclidean = TRUE`). thin_dist Numeric value representing thinning distance kilometers (default: 10 km). trials Integer specifying number trials run thinning (default: 10). all_trials Logical value indicating whether return results trials (`TRUE`) just best attempt points retained (`FALSE`, default). target_points Optional integer specifying number points retain. `NULL` (default), function tries maximize number points retained. euclidean Logical value indicating whether compute Euclidean distance (`TRUE`) Haversine distance (`FALSE`, default). R Numeric value representing Earth's radius kilometers (default: 6371 km). used `euclidean = FALSE`.","code":""},{"path":"https://jmestret.github.io/GeoThinneR/reference/brute_force_thinning.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Brute Force Thinning — brute_force_thinning","text":"logical vector indicating points kept best trial `all_trials = FALSE`; otherwise, list logical vectors trial.","code":""},{"path":"https://jmestret.github.io/GeoThinneR/reference/brute_force_thinning.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Brute Force Thinning — brute_force_thinning","text":"","code":"# Example with geographic coordinates (Haversine distance) coords <- data.frame(   long = c(-122.4194, -122.4195, -122.4196),   lat = c(37.7749, 37.7740, 37.7741) ) coords <- as.matrix(coords)  result <- brute_force_thinning(coords, thin_dist = 0.1, trials = 5) print(result) #> [[1]] #> [1]  TRUE  TRUE FALSE #>   # Example computing Euclidean distance result_euclidean <- brute_force_thinning(coords, thin_dist = 1, trials = 5, euclidean = TRUE) print(result_euclidean) #> [[1]] #> [1] FALSE FALSE  TRUE #>"},{"path":"https://jmestret.github.io/GeoThinneR/reference/caretta.html","id":null,"dir":"Reference","previous_headings":"","what":"Loggerhead Sea Turtle (Caretta caretta) Occurrences in the Mediterranean Sea — caretta","title":"Loggerhead Sea Turtle (Caretta caretta) Occurrences in the Mediterranean Sea — caretta","text":"dataset contains subset global occurrences Loggerhead Sea Turtle (Caretta caretta), filtered records Mediterranean Sea. data sourced Global Biodiversity Information Facility (GBIF).","code":""},{"path":"https://jmestret.github.io/GeoThinneR/reference/caretta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Loggerhead Sea Turtle (Caretta caretta) Occurrences in the Mediterranean Sea — caretta","text":"","code":"data(\"caretta\")"},{"path":"https://jmestret.github.io/GeoThinneR/reference/caretta.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Loggerhead Sea Turtle (Caretta caretta) Occurrences in the Mediterranean Sea — caretta","text":"data frame 6785 rows 5 columns: decimalLongitude Numeric. Longitude coordinates (WGS84). decimalLatitude Numeric. Latitude coordinates (WGS84). year Integer. year occurrence recorded. species Character. scientific name species, .e., Caretta caretta. coordinateUncertaintyInMeters Numeric. uncertainty coordinates meters.","code":""},{"path":"https://jmestret.github.io/GeoThinneR/reference/caretta.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Loggerhead Sea Turtle (Caretta caretta) Occurrences in the Mediterranean Sea — caretta","text":"Global Biodiversity Information Facility (GBIF), https://www.gbif.org/species/8894817","code":""},{"path":"https://jmestret.github.io/GeoThinneR/reference/caretta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Loggerhead Sea Turtle (Caretta caretta) Occurrences in the Mediterranean Sea — caretta","text":"dataset filtered include records within Mediterranean Sea. occurrence data cover multiple years, provides information temporal distribution species region.","code":""},{"path":"https://jmestret.github.io/GeoThinneR/reference/grid_thinning.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Grid-Based Thinning of Spatial Points — grid_thinning","title":"Perform Grid-Based Thinning of Spatial Points — grid_thinning","text":"function performs thinning spatial points assigning grid cells based specified resolution thinning distance. can either create new raster grid use existing raster object.","code":""},{"path":"https://jmestret.github.io/GeoThinneR/reference/grid_thinning.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Grid-Based Thinning of Spatial Points — grid_thinning","text":"","code":"grid_thinning(   coordinates,   thin_dist = NULL,   resolution = NULL,   origin = NULL,   raster_obj = NULL,   trials = 10,   all_trials = FALSE,   crs = \"epsg:4326\",   priority = NULL )"},{"path":"https://jmestret.github.io/GeoThinneR/reference/grid_thinning.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Grid-Based Thinning of Spatial Points — grid_thinning","text":"coordinates numeric matrix data frame two columns representing x (longitude) y (latitude) coordinates points. thin_dist numeric value representing thinning distance kilometers. converted degrees `resolution` provided. resolution numeric value representing resolution (degrees) raster grid. provided, takes priority `thin_dist`. origin numeric vector length 2 (example, `c(0, 0)`), specifying origin raster grid (optional). raster_obj optional `terra` SpatRaster object use grid thinning. provided, raster object used instead creating new one. trials integer specifying number trials perform thinning (default: 10). all_trials logical value indicating whether return results trials (`TRUE`) just first trial (`FALSE`, default). crs optional CRS (Coordinate Reference System) project coordinates raster (default WGS84). can EPSG code, PROJ.4 string, `terra::crs` object. priority length number points numerical values indicating priority point. Instead eliminating points randomly, points preferred according values.","code":""},{"path":"https://jmestret.github.io/GeoThinneR/reference/grid_thinning.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Grid-Based Thinning of Spatial Points — grid_thinning","text":"list logical vectors indicating points keep trial.","code":""},{"path":"https://jmestret.github.io/GeoThinneR/reference/grid_thinning.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Grid-Based Thinning of Spatial Points — grid_thinning","text":"","code":"# Example: Grid thinning using thin_dist coordinates <- matrix(c(-122.4194, 37.7749,                         -122.4195, 37.7740,                         -122.4196, 37.7741), ncol = 2, byrow = TRUE)  result <- grid_thinning(coordinates, thin_dist = 10, trials = 5, all_trials = TRUE) print(result) #> [[1]] #> [1]  TRUE  TRUE FALSE #>  #> [[2]] #> [1]  TRUE  TRUE FALSE #>  #> [[3]] #> [1]  TRUE  TRUE FALSE #>  #> [[4]] #> [1]  TRUE  TRUE FALSE #>  #> [[5]] #> [1] FALSE  TRUE  TRUE #>   # Example: Grid thinning using a custom resolution result_res <- grid_thinning(coordinates, resolution = 0.01, trials = 5) print(result_res) #> [[1]] #> [1]  TRUE  TRUE FALSE #>   # Example: Using a custom raster object library(terra) #> terra 1.7.78 rast_obj <- terra::rast(nrows = 100, ncols = 100, xmin = -123, xmax = -121, ymin = 36, ymax = 38) result_raster <- grid_thinning(coordinates, raster_obj = rast_obj, trials = 5) print(result_raster) #> [[1]] #> [1]  TRUE FALSE FALSE #>"},{"path":"https://jmestret.github.io/GeoThinneR/reference/kd_tree_thinning.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform K-D Tree ANN Thinning — kd_tree_thinning","title":"Perform K-D Tree ANN Thinning — kd_tree_thinning","text":"function applies K-D tree Approximate Nearest Neighbors (ANN) thinning algorithm set spatial coordinates. can optionally use space partitioning improve thinning process, particularly useful large datasets.","code":""},{"path":"https://jmestret.github.io/GeoThinneR/reference/kd_tree_thinning.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform K-D Tree ANN Thinning — kd_tree_thinning","text":"","code":"kd_tree_thinning(   coordinates,   thin_dist = 10,   trials = 10,   all_trials = FALSE,   space_partitioning = FALSE,   euclidean = FALSE,   R = 6371 )"},{"path":"https://jmestret.github.io/GeoThinneR/reference/kd_tree_thinning.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform K-D Tree ANN Thinning — kd_tree_thinning","text":"coordinates matrix coordinates thin, two columns representing longitude latitude. thin_dist numeric value representing thinning distance kilometers. Points closer distance considered redundant may removed. trials integer specifying number trials run thinning. Multiple trials can help achieve better result randomizing thinning process. Default 10. all_trials logical value indicating whether return results attempts (`TRUE`) best attempt points retained (`FALSE`). Default `FALSE`. space_partitioning logical value indicating whether use space partitioning divide coordinates grid cells thinning. can improve efficiency large datasets. Default `FALSE`. euclidean Logical value indicating whether compute Euclidean distance (`TRUE`) Haversine distance (`FALSE`, default). R numeric value representing radius Earth kilometers. default 6371 km.","code":""},{"path":"https://jmestret.github.io/GeoThinneR/reference/kd_tree_thinning.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform K-D Tree ANN Thinning — kd_tree_thinning","text":"list. `all_trials` `FALSE`, list contains single logical vector indicating points kept best trial. `all_trials` `TRUE`, list contains logical vector trial.","code":""},{"path":"https://jmestret.github.io/GeoThinneR/reference/kd_tree_thinning.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform K-D Tree ANN Thinning — kd_tree_thinning","text":"","code":"# Generate sample coordinates set.seed(123) coordinates <- matrix(runif(20, min = -180, max = 180), ncol = 2) # 10 random points  # Perform K-D Tree thinning without space partitioning result <- kd_tree_thinning(coordinates, thin_dist = 10, trials = 5, all_trials = FALSE) print(result) #> [[1]] #>  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE #>   # Perform K-D Tree thinning with space partitioning result_partitioned <- kd_tree_thinning(coordinates, thin_dist = 5000, trials = 5,                                        space_partitioning = TRUE, all_trials = TRUE) print(result_partitioned) #> [[1]] #>  [1]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE  TRUE  TRUE #>  #> [[2]] #>  [1]  TRUE  TRUE  TRUE  TRUE FALSE  TRUE FALSE  TRUE  TRUE  TRUE #>  #> [[3]] #>  [1]  TRUE  TRUE  TRUE  TRUE FALSE  TRUE FALSE  TRUE  TRUE  TRUE #>  #> [[4]] #>  [1]  TRUE  TRUE  TRUE  TRUE FALSE  TRUE FALSE  TRUE  TRUE  TRUE #>  #> [[5]] #>  [1]  TRUE  TRUE  TRUE  TRUE FALSE  TRUE FALSE  TRUE  TRUE  TRUE #>   # Perform K-D Tree thinning with Cartesian coordinates cartesian_coordinates <- long_lat_to_cartesian(coordinates[, 1], coordinates[, 2]) result_cartesian <- kd_tree_thinning(cartesian_coordinates, thin_dist = 10, trials = 5,                                      euclidean = TRUE) print(result_cartesian) #> [[1]] #>  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE #>"},{"path":"https://jmestret.github.io/GeoThinneR/reference/long_lat_to_cartesian.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Geographic Coordinates to Cartesian Coordinates — long_lat_to_cartesian","title":"Convert Geographic Coordinates to Cartesian Coordinates — long_lat_to_cartesian","text":"function converts geographic coordinates, given longitude latitude degrees, Cartesian coordinates (x, y, z) assuming spherical Earth model.","code":""},{"path":"https://jmestret.github.io/GeoThinneR/reference/long_lat_to_cartesian.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Geographic Coordinates to Cartesian Coordinates — long_lat_to_cartesian","text":"","code":"long_lat_to_cartesian(long, lat, R = 6371)"},{"path":"https://jmestret.github.io/GeoThinneR/reference/long_lat_to_cartesian.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Geographic Coordinates to Cartesian Coordinates — long_lat_to_cartesian","text":"long Numeric vector longitudes degrees. lat Numeric vector latitudes degrees. R Radius Earth kilometers (default: 6371 km).","code":""},{"path":"https://jmestret.github.io/GeoThinneR/reference/long_lat_to_cartesian.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Geographic Coordinates to Cartesian Coordinates — long_lat_to_cartesian","text":"numeric matrix three columns (x, y, z) representing Cartesian coordinates.","code":""},{"path":"https://jmestret.github.io/GeoThinneR/reference/long_lat_to_cartesian.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Geographic Coordinates to Cartesian Coordinates — long_lat_to_cartesian","text":"","code":"long <- c(-122.4194, 0) lat <- c(37.7749, 0) long_lat_to_cartesian(long, lat) #>              x         y        z #> [1,] -2699.749 -4250.942 3902.625 #> [2,]  6371.000     0.000    0.000"},{"path":"https://jmestret.github.io/GeoThinneR/reference/max_thinning_algorithm.html","id":null,"dir":"Reference","previous_headings":"","what":"Thinning Algorithm for Spatial Data — max_thinning_algorithm","title":"Thinning Algorithm for Spatial Data — max_thinning_algorithm","text":"function performs core thinning algorithm used reduce density points spatial data maintaining spatial representation. works iteratively removing points neighbors points neighbors remain. algorithm supports multiple trials find optimal thinning solution.","code":""},{"path":"https://jmestret.github.io/GeoThinneR/reference/max_thinning_algorithm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Thinning Algorithm for Spatial Data — max_thinning_algorithm","text":"","code":"max_thinning_algorithm(neighbor_indices, n, trials, all_trials = FALSE)"},{"path":"https://jmestret.github.io/GeoThinneR/reference/max_thinning_algorithm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Thinning Algorithm for Spatial Data — max_thinning_algorithm","text":"neighbor_indices list integer vectors element contains indices neighboring points point dataset. n number points dataset. trials number thinning trials run. all_trials TRUE, returns results trials; FALSE, returns best trial points retained (default: FALSE).","code":""},{"path":"https://jmestret.github.io/GeoThinneR/reference/max_thinning_algorithm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Thinning Algorithm for Spatial Data — max_thinning_algorithm","text":"list logical vectors indicating points kept trial         all_trials TRUE; otherwise, single logical vector indicating points kept         best trial.","code":""},{"path":"https://jmestret.github.io/GeoThinneR/reference/max_thinning_algorithm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Thinning Algorithm for Spatial Data — max_thinning_algorithm","text":"","code":"# Example usage within a larger thinning function neighbor_indices <- list(c(2, 3), c(1, 3), c(1, 2)) n <- 3 trials <- 5 all_trials <- FALSE keep_points <- max_thinning_algorithm(neighbor_indices, n, trials, all_trials) print(keep_points) #> [[1]] #> [1] FALSE FALSE  TRUE #>"},{"path":"https://jmestret.github.io/GeoThinneR/reference/precision_thinning.html","id":null,"dir":"Reference","previous_headings":"","what":"Precision Thinning of Spatial Points — precision_thinning","title":"Precision Thinning of Spatial Points — precision_thinning","text":"function performs thinning spatial points rounding coordinates specified precision removing duplicates. can perform multiple trials process return results just best trial.","code":""},{"path":"https://jmestret.github.io/GeoThinneR/reference/precision_thinning.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Precision Thinning of Spatial Points — precision_thinning","text":"","code":"precision_thinning(   coordinates,   precision = 4,   trials = 10,   all_trials = FALSE,   priority = NULL )"},{"path":"https://jmestret.github.io/GeoThinneR/reference/precision_thinning.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Precision Thinning of Spatial Points — precision_thinning","text":"coordinates numeric matrix data frame two columns representing longitude latitude points. precision integer specifying number decimal places coordinates rounded. Default 4. trials integer specifying number thinning trials perform. Default 10. all_trials logical value indicating whether return results trials (`TRUE`) just first/best trial (`FALSE`). Default `FALSE`. priority length number points numerical values indicating priority point. Instead eliminating points randomly, points preferred accoridng values.","code":""},{"path":"https://jmestret.github.io/GeoThinneR/reference/precision_thinning.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Precision Thinning of Spatial Points — precision_thinning","text":"`all_trials` `FALSE`, returns logical vector indicating points kept first trial. `all_trials` `TRUE`, returns list logical vectors, one trial.","code":""},{"path":"https://jmestret.github.io/GeoThinneR/reference/precision_thinning.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Precision Thinning of Spatial Points — precision_thinning","text":"function performs multiple trials account randomness order point selection. default, returns first trial, setting `all_trials = TRUE` return results trials.","code":""},{"path":"https://jmestret.github.io/GeoThinneR/reference/precision_thinning.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Precision Thinning of Spatial Points — precision_thinning","text":"","code":"# Example usage coordinates <- matrix(c(-123.3656, 48.4284, -123.3657, 48.4285, -123.3658, 48.4286), ncol = 2) result <- precision_thinning(coordinates, precision = 3, trials = 5, all_trials = TRUE) print(result) #> [[1]] #> [1] TRUE TRUE TRUE #>  #> [[2]] #> [1] TRUE TRUE TRUE #>  #> [[3]] #> [1] TRUE TRUE TRUE #>  #> [[4]] #> [1] TRUE TRUE TRUE #>  #> [[5]] #> [1] TRUE TRUE TRUE #>   # Example with a single trial and lower precision result_single <- precision_thinning(coordinates, precision = 2, trials = 1, all_trials = FALSE) print(result_single) #> [[1]] #> [1] FALSE  TRUE  TRUE #>"},{"path":"https://jmestret.github.io/GeoThinneR/reference/r_tree_thinning.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform R-Tree Thinning — r_tree_thinning","title":"Perform R-Tree Thinning — r_tree_thinning","text":"Applies R-tree thinning algorithm set coordinates.","code":""},{"path":"https://jmestret.github.io/GeoThinneR/reference/r_tree_thinning.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform R-Tree Thinning — r_tree_thinning","text":"","code":"r_tree_thinning(   coordinates,   thin_dist = 10,   trials = 10,   all_trials = FALSE,   space_partitioning = FALSE,   euclidean = FALSE,   R = 6371 )"},{"path":"https://jmestret.github.io/GeoThinneR/reference/r_tree_thinning.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform R-Tree Thinning — r_tree_thinning","text":"coordinates matrix coordinates thin, longitude latitude. thin_dist Thinning distance kilometers. trials Number trials run thinning. all_trials TRUE, returns results attempts; FALSE, returns best attempt points retained (default: FALSE). space_partitioning logical value indicating whether use space partitioning. euclidean Logical value indicating whether compute Euclidean distance (`TRUE`) Haversine distance (`FALSE`, default). R Radius Earth kilometers (default: 6371 km).","code":""},{"path":"https://jmestret.github.io/GeoThinneR/reference/r_tree_thinning.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform R-Tree Thinning — r_tree_thinning","text":"logical vector indicating points kept best trial all_trials FALSE; otherwise, list logical vectors trial.","code":""},{"path":"https://jmestret.github.io/GeoThinneR/reference/r_tree_thinning.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform R-Tree Thinning — r_tree_thinning","text":"want use R-trees need install `rtree` package `remotes::install_github(\"jmestret/rtree\")`. modified version https://github.com/akoyabio/rtree.","code":""},{"path":"https://jmestret.github.io/GeoThinneR/reference/r_tree_thinning.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform R-Tree Thinning — r_tree_thinning","text":"","code":"if (requireNamespace(\"rtree\", quietly = TRUE)) {   # Generate random coordinates   set.seed(123)   coordinates <- matrix(runif(20, min = -180, max = 180), ncol = 2) # 10 random points    # Perform thinning without space partitioning   result <- r_tree_thinning(coordinates, thin_dist = 10, trials = 5)   print(result)    # Perform thinning with space partitioning   result_space_part <- r_tree_thinning(coordinates, thin_dist = 10, trials = 5,                                        space_partitioning = TRUE)   print(result_space_part)    # Perform thinning with euclidean distance   result_euclidean <- r_tree_thinning(coordinates, thin_dist = 10, trials = 5, euclidean = TRUE)   print(result_euclidean) } #> [[1]] #>  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE #>  #> [[1]] #>  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE #>  #> [[1]] #>  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE #>"},{"path":"https://jmestret.github.io/GeoThinneR/reference/rounding_hashing_thinning.html","id":null,"dir":"Reference","previous_headings":"","what":"Rounding Hashing Thinning — rounding_hashing_thinning","title":"Rounding Hashing Thinning — rounding_hashing_thinning","text":"Performs thinning geographical coordinates using hashing approach rounds coordinates create grid.","code":""},{"path":"https://jmestret.github.io/GeoThinneR/reference/rounding_hashing_thinning.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rounding Hashing Thinning — rounding_hashing_thinning","text":"","code":"rounding_hashing_thinning(   coordinates,   thin_dist = 10,   trials = 10,   all_trials = FALSE,   euclidean = FALSE,   R = 6371,   seed = NULL )"},{"path":"https://jmestret.github.io/GeoThinneR/reference/rounding_hashing_thinning.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rounding Hashing Thinning — rounding_hashing_thinning","text":"coordinates numeric matrix size (n x 2) containing longitude latitude points, row represents coordinate pair. thin_dist numeric value specifying distance (kilometers) within points considered thinning. trials integer indicating number trials run thinning process. trials may yield better results. all_trials logical value indicating whether return trials (`TRUE`) best trial (`FALSE`). euclidean Logical value indicating whether compute Euclidean distance (`TRUE`) Haversine distance (`FALSE`, default). R numeric value representing radius Earth kilometers. Default set 6371.0 km. seed Optional; integer seed reproducibility results.","code":""},{"path":"https://jmestret.github.io/GeoThinneR/reference/rounding_hashing_thinning.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rounding Hashing Thinning — rounding_hashing_thinning","text":"logical vector indicating points kept thinning process. `all_trials` `TRUE`, list logical vectors returned, one trial.","code":""},{"path":"https://jmestret.github.io/GeoThinneR/reference/rounding_hashing_thinning.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rounding Hashing Thinning — rounding_hashing_thinning","text":"function applies hashing technique group coordinates grid cells, allowing efficient thinning based specified distance. can run multiple trials determine best set points keep, return trials specified.","code":""},{"path":"https://jmestret.github.io/GeoThinneR/reference/rounding_hashing_thinning.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rounding Hashing Thinning — rounding_hashing_thinning","text":"","code":"# Generate random coordinates set.seed(123) coordinates <- matrix(runif(20, min = -180, max = 180), ncol = 2) # 10 random points  # Perform rounding hashing thinning result <- rounding_hashing_thinning(coordinates, thin_dist = 10, trials = 5) print(result) #> [[1]] #>  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE #>   # Perform thinning with all trials all_results <- rounding_hashing_thinning(coordinates, thin_dist = 5000, trials = 5,                                          all_trials = TRUE) print(all_results) #> [[1]] #>  [1]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE  TRUE #>  #> [[2]] #>  [1]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE  TRUE #>  #> [[3]] #>  [1]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE  TRUE #>  #> [[4]] #>  [1]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE  TRUE #>  #> [[5]] #>  [1]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE  TRUE #>   # Perform thinning with euclidean distance result_euclidean <- rounding_hashing_thinning(coordinates, thin_dist = 10,                                               trials = 5, euclidean = TRUE) print(result_euclidean) #> [[1]] #>  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE #>"},{"path":"https://jmestret.github.io/GeoThinneR/reference/thin_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Spatial Thinning of Points — thin_points","title":"Spatial Thinning of Points — thin_points","text":"function performs spatial thinning geographic points reduce point density maintaining spatial representation. Points thinned based specified distance, grid, precision, multiple trials can performed identify best thinned dataset.","code":""},{"path":"https://jmestret.github.io/GeoThinneR/reference/thin_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spatial Thinning of Points — thin_points","text":"","code":"thin_points(   data,   long_col = NULL,   lat_col = NULL,   group_col = NULL,   method = c(\"brute_force\", \"kd_tree\", \"r_tree\", \"round_hash\", \"grid\", \"precision\"),   trials = 10,   all_trials = FALSE,   target_points = NULL,   seed = NULL,   verbose = FALSE,   ... )"},{"path":"https://jmestret.github.io/GeoThinneR/reference/thin_points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spatial Thinning of Points — thin_points","text":"data data frame tibble containing points thin. Must contain longitude latitude columns. long_col Name column longitude coordinates (default: \"decimalLongitude\"). lat_col Name column latitude coordinates (default: \"decimalLatitude\"). group_col Name column grouping points (e.g., species name, year). NULL, grouping applied. method Thinning method use `c(\"brute_force\", \"kd_tree\", \"r_tree\", \"round_hash\", \"grid\", \"precision\")`. trials Number thinning iterations perform (default: 10). all_trials TRUE, returns results attempts; FALSE, returns best attempt points retained (default: FALSE). target_points Optional; numeric value specifying exact number points keep. NULL (default), maximizes number kept points. seed Optional; integer seed reproducibility results. verbose TRUE, prints progress messages (default: FALSE). ... Additional parameters passed specific thinning methods (e.g., thin_dist, precision, resolution, origin, R).","code":""},{"path":"https://jmestret.github.io/GeoThinneR/reference/thin_points.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spatial Thinning of Points — thin_points","text":"tibble thinned points, combined result attempts `all_trials` TRUE.","code":""},{"path":"https://jmestret.github.io/GeoThinneR/reference/thin_points.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Spatial Thinning of Points — thin_points","text":"thinning methods available : - `brute_force`: Uses brute force approach thin points. - `kd_tree`: Uses K-D trees thinning. - `r_tree`: Uses R-trees thinning. - `round_hash`: Uses rounding hashing efficient thinning. - `grid`: Applies grid-based thinning method. - `precision`: Utilizes precision-based thinning. information specific thinning methods inputs, refer respective documentation: - `brute_force_thinning()` - `grid_thinning()` - `kd_tree_thinning()` - `r_tree_thinning()` - `rounding_hashing_thinning()` - `precision_thinning()`","code":""},{"path":"https://jmestret.github.io/GeoThinneR/reference/thin_points.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spatial Thinning of Points — thin_points","text":"","code":"# Generate sample data set.seed(123) sample_data <- data.frame(   decimalLongitude = runif(100, -180, 180),   decimalLatitude = runif(100, -90, 90) )  # Perform thinning using K-D tree method thinned_data <- thin_points(sample_data,                              long_col = \"decimalLongitude\",                              lat_col = \"decimalLatitude\",                              method = \"kd_tree\",                              trials = 5,                              verbose = TRUE) #> Starting spatial thinning at 2024-09-02 20:20:01  #> Starting thinning process using method: kd_tree  #> Thinning process completed. #> Total execution time: 0 seconds  # Perform thinning with grouping sample_data$species <- sample(c(\"species_A\", \"species_B\"), 100, replace = TRUE) thinned_grouped_data <- thin_points(sample_data,                                      long_col = \"decimalLongitude\",                                      lat_col = \"decimalLatitude\",                                      group_col = \"species\",                                      method = \"kd_tree\",                                      trials = 10)"},{"path":[]},{"path":"https://jmestret.github.io/GeoThinneR/news/index.html","id":"geothinner-100","dir":"Changelog","previous_headings":"","what":"GeoThinneR 1.0.0","title":"GeoThinneR 1.0.0","text":"CRAN release: 2024-09-02 Initial release!","code":""}]
